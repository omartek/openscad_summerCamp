// CSG file generated from FreeCAD 0.15.4671 (Git)
module mk42() {
box = [[0, 1, 2, 3], [4, 5, 1, 0.000000],[7, 6, 5, 4], [5, 6, 2, 1], [6, 7, 3, 2], [7, 4, 0, 3]];

function zextrude(p0, p1, p2, p3) = [p0, p1, p2, p3, p0+[0,0,2], p1+[0,0,2],p2+[0,0,2],p3+[0,0,2]];

translate([22.0, 0.50, -2.0]) union() {  // Simplify 3D requires the origin in the STL file to be a specific point.
// group(){    // Border
// // Border: Top Left Angled line
// polyhedron ( points = zextrude([-20.00000,225.500000,0.000000],[-24.50000,221.000000,0.000000],[-23.50000,221.000000,0.000000],[-20.00000,224.500000,0.000000]), faces = box);
// // Border: Row 0 horizontal line #1
// polyhedron ( points = zextrude([-20.000000,224.500000,0.000000],[226.000000,224.500000,0.000000],[226.000000,225.500000,0.000000],[-20.000000,225.500000,0.000000]), faces = box);
// // Border: Top Right Angled line
// polyhedron ( points = zextrude([230.500000,221.000000,0.000000],[226.000000,225.500000,0.000000],[226.000000,224.500000,0.000000],[229.500000,221.000000,0.000000]), faces = box);
// // Border: Column 7 vertical line #1
// polyhedron ( points = zextrude([229.500000,-6.000000,0.000000],[230.500000,-6.000000,0.000000],[230.500000,221.000000,0.000000],[229.500000,221.000000,0.000000]), faces = box);
// // Border: Bottom Right Angled line
// polyhedron ( points = zextrude([226.000000,-10.500000,0.000000],[230.500000,-6.000000,0.000000],[229.500000,-6.000000,0.000000],[226.000000,-9.500000,0.000000]), faces = box);
// // Border: Row 8 horizontal line #1
// polyhedron ( points = zextrude([226.000000,-9.500000,0.000000],[-20.000000,-9.500000,0.000000],[-20.000000,-10.5000000,0.000000],[226.000000,-10.500000,0.000000]), faces = box);
// // Border: Bottom Left Angled line
// polyhedron ( points = zextrude([-24.500000,-6.00000,0.000000],[-20.000000,-10.500000,0.000000],[-20.000000,-9.500000,0.000000],[-23.500000,-6.000000,0.000000]), faces = box);
// // Border: Column 0 vertical line #1
// polyhedron ( points = zextrude([-23.500000,221.000000,0.000000],[-24.500000,221.00000,0.000000],[-24.500000,-6.000000,0.000000],[-23.500000,-6.00000,0.000000]), faces = box);
// }

linear_extrude(2)
polygon ( [ 
// [-20.00000,225.500000], 
// [-24.50000,221.000000], 
// [-23.50000,221.000000],
// [-20.00000,224.500000], 

// [-20.000000,224.500000],
// [226.000000,224.500000],
// [226.000000,225.500000],
// [-20.000000,225.500000],

// [230.500000,221.000000],
// [226.000000,225.500000],
// [226.000000,224.500000],
// [229.500000,221.000000],

// [229.500000,-6.000000],
// [230.500000,-6.000000], 
// [230.500000,221.000000],
// [229.500000,221.000000],

// [226.000000,-10.500000],
// [230.500000,-6.000000],
// [229.500000,-6.000000],
// [226.000000,-9.500000],

// [226.000000,-9.500000], 
// [-20.000000,-9.500000],
// [-20.000000,-10.5000000],
// [226.000000,-10.500000],

// [-24.500000,-6.00000],
// [-20.000000,-10.500000],
// [-20.000000,-9.500000], 
// [-23.500000,-6.000000],

// [-23.500000,221.000000], 
// [-24.500000,221.00000], 
// [-24.500000,-6.000000],
// [-23.500000,-6.00000] , 

 
 [-24.50000,221.000000],
 [-20.50000,225.500000], 
 [226.00000,225.500000], 
 [229.50000,221.500000], 
 [229.50000,-6.000000], 
 [226.00000,-10.500000], 
 [-20.00,-10.500],
 [-24.00,-6.00]
 
 
],paths = [[0,1,2,3,4,5,6,7]]);



zheight = 5.5;
group(){    // Screw Holes

// Upper Left circle
translate(v = [0, 210, -zheight]) cylinder(h=zheight, r=1.550797, $fn = 6);
// Upper right circle
translate(v = [209, 210, -zheight]) cylinder(h=zheight, r=1.550797, $fn = 6);
// Top Center circle
translate(v = [105, 125, -zheight]) cylinder(h=zheight, r=1.550797, $fn = 6);
// Bottom Center circle
translate(v = [105, 84, -zheight]) cylinder(h=zheight, r=1.550797, $fn = 6);
// Lower Left circle
translate(v = [0, 0, -zheight]) cylinder(h=zheight, r=1.550797, $fn = 6);
// Lower Right circle
translate(v = [209, 0, -zheight]) cylinder(h=zheight, r=1.550797, $fn = 6);
}

}

}

%mk42();

module mk52() {
	translate([-1.5,-24.5,-8])import("010_Mk52Headbed_Assembly.stl");
}